scalar DateTime
scalar JSON
scalar Void
scalar Money
scalar WKT_4326

type User {
  id: Int!
  emailAddress: String!
  name: String
  familyName: String
  roles: [Role!]!
  permissions: [Permission!]!
  projects: [Project!]!
}

type Role {
  id: Int!
  name: String!
  description: String
  permissions: [Permission!]!
}

type Permission {
  id: Int!
  name: String!
  description: String
}

input ControlledVocabularyInput {
  root: String!
  tree: String!
  term: String!
}

type ControlledVocabulary {
  id: Int!
  term: String!
  children: [ControlledVocabulary!]
  tree: String!
  root: String!
  geometry(simplified: Boolean): WKT_4326
}

input VocabularyFilterInput {
  field: String!
  term: String!
}

input MitigationFiltersInput {
  ids: [Int!]
  vocabularyFilters: [VocabularyFilterInput!]
}

input AdaptationFiltersInput {
  ids: [Int!]
  vocabularyFilters: [VocabularyFilterInput!]
}

type SubmissionTemplate {
  id: Int!
  createdBy: User!
  createdAt: DateTime!
  filePath: String!
}

type Query {
  # Get a list of all the the Excel submission templates that have been uploaded
  submissionTemplates: [SubmissionTemplate!]!
  # Search projects
  projects(
    ids: [Int!]
    vocabularyFilters: [VocabularyFilterInput!]
    mitigationFilters: MitigationFiltersInput
    adaptationFilters: AdaptationFiltersInput
    limit: Int
    offset: Int
  ): [Project]!
  # Search vocabulary tress
  controlledVocabulary(root: String!, tree: String!): ControlledVocabulary
  # Search users
  users(ids: [Int!]): [User!]
  user(id: Int!): User
  # Search roles
  roles: [Role!]!
  # Search permissions
  permissions: [Permission!]!
}

# type Subscription {}

type Mutation {
  killServer: Void
  migrateDatabase(dropSchema: Boolean): JSON!
  seedDatabase(userModel: Boolean, erm: Boolean, vocabularies: Boolean): JSON!
  # Create a project
  createProject(
    generalDetailsForm: ProjectInput!
    mitigationDetailsForm: MitigationInput
    adaptationDetailsForm: AdaptationInput
  ): Project!
  # Update a project
  updateProject(
    projectForm: ProjectInput!
    mitigationForms: [MitigationInput!]
    adaptationForms: [AdaptationInput!]
  ): Project!
  # Delete a project
  deleteProject(id: Int!): Int
  # Assign roles to users
  assignUserRoles(userId: Int!, roleIds: [Int!]!): User!
}
