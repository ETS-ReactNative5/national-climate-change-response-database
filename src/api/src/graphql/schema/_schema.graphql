scalar DateTime
scalar JSON
scalar Void
scalar Money

type UserRole {
  id: ID!
  name: String!
  description: String
}

enum InterventionType {
  Mitigation
  Adaptation
  CrossCutting
}

enum ProjectType {
  Afforestation
  Agriculture
  BiomassEnergy
  Biogas
  Cement
  CoalBedMineMethane
  EEHouseholds
  EEIndustry
  EEOwnGeneration
  EEService
  EESupplySide
  EnergyDistribution
  FossilFuelSwitch
  FugitiveGases
  Geothermal
  HFCs
  Hydro
  LandfillGas
  N2O
  PFCs
  Reforestation
  Solar
  Tidal
  Transport
  Wind
}

enum ProjectSubType {
  Agriculturalresidues_Mustardcrop
  AgriculturalResidues_OtherKinds
  AgriculturalResidues_PoultryLitter
  AgriculturalResidues_RiceHusk
  BagassePower
  Biodiesel
  BlackLiquor
  Ethanol
  Forest
  Biomass
  ForestResidues_Other
  ForestResidues_SawmillWaste
  GasificationOfBiomass
  IndustrialWaste
  Irrigation
  PalmOilSolidWaste
  BiogasFlaring
  BiogasPower
  CoalMineMethane
  BuildingMaterials
  Cement
  Chemicals
  CokeOven
  Construction
  Electronics
  Food
  Glass
  IronAndSteel
  Machinery
  MetalProducts
  Mining
  NonFerrousMetals
  Paper
  Petrochemicals
  Textiles
  Wood
  ExistingDam
  NewDam
  RunOfRiver
  CombustionForMSW
  Composting
  GasificationOfMSW
  LandfillFlaring
  LandfillPower
  AdipicAcid
  Caprolactam
  NitricAcid
  SolarCoking
  SolarPV
  SolarWaterHeating
}

input ProjectInput {
  # Project title :: Unique project name in line with programmatic inputs
  title: String
  # Project description :: Enter long text description here
  description: String!
  # Project manager :: Who is in charge of managing this project?
  projectManager: String
  # Intervention Type :: What type of intervention does this project focus on?
  # interventionType: InterventionType!
  # Lead agent :: Lead contact agent
  leadAgent: String
  # Host organization :: Who is the main hosting organization?
  hostOrganisation: String
  # Host partner :: Who is the main hosting partner?
  hostPartner: String
  # Funding organization :: Who is the main funding organization?
  fundingOrganisation: String
  # Funding partner :: Who is the main funding partner
  fundingPartner: String
  # Alternative contact :: Who else can people contact?
  alternativeContact: String
  # Alternative contact email :: Contact details of the alternative contact
  alternativeContactEmail: String
  # Link :: Is there a URI that is associated with this project?
  link: String
  # Project start date :: Round to the beginning or end of the year
  startDate: DateTime
  # Project end date :: Round to the beginning or end of the year
  endDate: DateTime
  # Validation status :: Has this project been validated?
  validationStatus: Boolean
  # Validation Comments :: Any validation feedback?
  validationComments: String
  # Estimated budget :: What is the estimated budget for this project?
  estimatedBudget: Money
  # Budget (lower bound) :: What is the lower-bound of the estimated budget?
  budgetLower: Money
  # Budget (upper bound) :: What is the upper-bound of the estimated budget?
  budgetUpper: Money

  # projectType: ProjectType!
  # projectSubType: ProjectSubType!
  # hostSector: Int! # TODO enum
  # projectStatus: Int! # TODO enum
  # fundingStatus: Int! # TODO enum
}

input AdaptationInput {
  # Adaptation title :: This is for reference purposes
  title: String!
  # Description :: Short description of this adaptation component
  description: String
}

input ResearchInput {
  # Research item title :: This is for reference purposes
  title: String!
  # Description :: Short description of this research component
  description: String
}

input MitigationInput {
  # Carbon credit :: Does this project produce carbon credits?
  CarbonCredit: Boolean!
  # Voluntary methodology :: Describe the method used in the project.
  VolMethodoloy: String!
  #  ::
  GoldStandard: Boolean!
  #  ::
  VCS: Boolean!
  # Other carbon programme :: Please list the name of the carbon programme.
  Other: String!
  # Programme method :: Please describe the programme.
  otherDesc: String!
  #  ::
  UpdtUser: String!
  #  ::
  UpdtTime: DateTime!
  # CDM project number :: The code a project is give by the CDM once it is accepted.
  CDMProjectNumber: String!

  # Mitigation type :: Mitigation type and subtype as defined by the UNFCCC CDM pipeline (e.g. industrial energy efficiency - iron & steel, hydro - new dam etc.)
  # ProjectType: ProjectType!

  # Mitigation subtype :: Mitigation type and subtype as defined by the UNFCCC CDM pipeline (e.g. industrial energy efficiency - iron & steel, hydro - new dam etc.)
  # ProjectSubType: ProjectSubType!

  # Host Sector (IPCC) :: Select the IPCC host sector that best decribes your project.
  # HostSector: HostSector!

  # Main SubSector :: Select the IPCC main subsector that best decribes you project.
  # HostMainSubSector: HostMainSubSector!

  # SubSector :: Select the IPCC subsector that best decribes your project.
  # HostSubSector: HostSubSector!

  # CDM Executive Board Status :: What is the CDM status of this project?
  # ExecutiveStatus: ExecutiveStatus!

  # Project status :: Planned: The concept for a project has been put forward but is not currently underway and may not specifically have funding.
  # Adopted (Approved): The project has moved from the concept stage and specifications for implementation have been established. This project may have been assigned funding.
  # In Progress: Infrastructure for the project is in the process of being established and the project has assigned funding.
  # Implemented (Operational): The project infrastructure has been completed and any remaining funding is now directed towards maintenance.
  # Published: The project has been completed and the outcome described in professional documentation
  # Expired: The project infrastructure is no longer useful or sustainable without additional funding or funding for the project has run out.
  # Discontinued: The project has been abandoned.
  # CDMStatus: CDMStatus!

  # CDM methodology :: Please select the CDM method used in your project.
  # CDMMethodoloy: CDMMethodoloy!
}

type Project {
  id: ID!
  title: String
}

type ControlledVocabulary {
  id: ID!
  term: String!
  children: [ControlledVocabulary!]
  trees: [String!]
}

type Query {
  projects(ids: [ID!]): [Project]!
  userRoles: [UserRole!]!
  controlledVocabulary(root: String!, tree: String!): ControlledVocabulary
}

# type Subscription {}

type Mutation {
  createProject(projectDetails: ProjectInput!): Project!
  updateProject(projectDetails: ProjectInput!): Project!
  updateVocabulary: JSON!
}
